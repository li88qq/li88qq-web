import path from "path";
import themePreprocessorPlugin from "@zougt/vite-plugin-theme-preprocessor";

export const themePlugin = () => {
    return themePreprocessorPlugin({
        less: {
            // close arbitraryMode
            arbitraryMode: false,
            // Provide multiple  LESS/SCSS variable files
            multipleScopeVars: [
                {
                    scopeName: "theme-default",
                    // path or varscontent must be selected
                    path: path.resolve("src/theme/theme-default.less"),
                    // varsContent same as content in path
                    // varsContent:`@primary-color:${defaultPrimaryColor};`
                },
                {
                    scopeName: "theme-dark",
                    path: path.resolve("src/theme/theme-dark.less"),
                },
            ],
            // The color in CSS is not generated by the theme color variable, and it can also be extracted into the theme CSS to improve the weight
            includeStyleWithColors: [
                {
                    // color can be string or string[], example: ["#ffffff","#000"] or ["transparent","none"].
                    color: "#ffffff",
                    // Exclude css props, example: not be #ffffff in background.
                    // excludeCssProps:["background","background-color"]
                    // Exclude css selectors
                    // excludeSelectors: [
                    //   ".ant-btn-link:hover, .ant-btn-link:focus, .ant-btn-link:active",
                    // ],
                },
            ],
            // add scopeName to html tag className. default use multipleScopeVars[0].scopeName
            defaultScopeName: "theme-default",
            //  extract independent theme CSS files in production mode  extract为true以下属性有效
            extract: false,
            // theme CSS files output dir , default use viteConfig.build.assetsDir
            outputDir: "",
            // link tag id
            themeLinkTagId: "theme-link-tag",
            // "head"||"head-prepend" || "body" ||"body-prepend"
            themeLinkTagInjectTo: "head",
            // Remove scopeName in the extracted CSS content.
            removeCssScopeName: false,
            // custom css file name.
            customThemeCssFileName: (scopeName) => scopeName,
        },
    })
}

